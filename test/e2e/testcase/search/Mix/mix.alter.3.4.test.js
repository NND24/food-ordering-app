const {
  createDriver,
  By,
  until,
} = require("../../../../config/webdriver_config");

async function test_3_4() {
  const driver = await createDriver();
  let result = {
    name: "3.4 Filter 'C∆°m' + Sort theo rating",
    status: "Failed",
  };

  try {
    await driver.get("http://localhost:3000/search?limit=20&page=1");
    await driver.wait(until.urlContains("/search?"), 10000);
    console.log("‚û°Ô∏è ƒê√£ chuy·ªÉn h∆∞·ªõng sang trang t√¨m ki·∫øm");

    // Ch·ªçn danh m·ª•c 'C∆°m'
    const comCategory = await findVisibleCategory(driver, "C∆°m");
    if (!comCategory) throw new Error("Kh√¥ng t√¨m th·∫•y danh m·ª•c 'C∆°m'");
    await comCategory.click();
    await driver.sleep(3000);

    // Click sort theo rating
    const sortRatingOption = await driver.findElement(
      By.css('[data-testid="sort-by-rating"]')
    );
    await sortRatingOption.click();
    await driver.wait(until.urlContains("sort=rating"), 5000);
    console.log("‚úÖ ƒê√£ ch·ªçn s·∫Øp x·∫øp theo rating");

    // L·∫•y t·∫•t c·∫£ store-card hi·ªÉn th·ªã
    await driver.wait(
      until.elementsLocated(By.css('[data-testid="store-card"]')),
      10000
    );
    const cards = await getVisibleStoreCards(driver);
    console.log(`üì¶ C√≥ ${cards.length} store sau l·ªçc 'C∆°m' + sort 'rating'`);

    if (cards.length === 0) throw new Error("Kh√¥ng c√≥ c·ª≠a h√†ng n√†o hi·ªÉn th·ªã");

    const ratings = [];

    for (const [i, card] of cards.entries()) {
      // üîç Ki·ªÉm tra danh m·ª•c 'C∆°m'
      const categoryEls = await card.findElements(By.xpath(".//a | .//span"));
      let hasCom = false;
      for (const el of categoryEls) {
        const text = (await el.getText()).trim().toLowerCase();
        if (text.includes("c∆°m")) {
          hasCom = true;
          break;
        }
      }
      if (!hasCom) {
        throw new Error(`‚ùå Card ${i + 1} kh√¥ng thu·ªôc danh m·ª•c 'C∆°m'`);
      }

      // üîç Ki·ªÉm tra rating n·∫øu c√≥
      const ratingEls = await card.findElements(
        By.xpath(".//span[contains(@class, 'text-[#fc6011]')]")
      );

      if (ratingEls.length > 0) {
        const ratingText = await ratingEls[0].getText();
        const rating = parseFloat(ratingText);
        if (!isNaN(rating)) {
          ratings.push({ index: i, value: rating });
        }
      }
    }

    console.log("‚úÖ T·∫•t c·∫£ store ƒë·ªÅu thu·ªôc danh m·ª•c 'C∆°m'");

    if (ratings.length > 0) {
      const topRated = ratings[0];
      if (topRated.index !== 0) {
        throw new Error(
          `‚ùå Store c√≥ rating (${topRated.value}) kh√¥ng n·∫±m ·ªü ƒë·∫ßu danh s√°ch (index=${topRated.index})`
        );
      }
      console.log(
        `‚úÖ Store c√≥ rating (${topRated.value}) n·∫±m ·ªü v·ªã tr√≠ ƒë·∫ßu ti√™n`
      );
    } else {
      console.log("‚ö†Ô∏è Kh√¥ng c√≥ store n√†o c√≥ rating trong danh s√°ch");
    }

    result.status = "Passed";
  } catch (error) {
    console.error(`‚ùå ${result.name} Failed:`, error.message);
  } finally {
    await driver.quit();
  }

  return result;
}

// H√†m ph·ª•
async function findVisibleCategory(driver, name) {
  const elements = await driver.findElements(
    By.xpath(
      `//div[contains(@class, 'category-item')]//span[text()='${name}']/ancestor::div[contains(@class, 'category-item')]`
    )
  );
  for (const el of elements) {
    if (await el.isDisplayed()) return el;
  }
  return null;
}

async function getVisibleStoreCards(driver) {
  const cards = await driver.findElements(By.css('[data-testid="store-card"]'));
  const visible = [];
  for (const card of cards) {
    if (await card.isDisplayed()) visible.push(card);
  }
  return visible;
}

module.exports = { test_3_4 };
