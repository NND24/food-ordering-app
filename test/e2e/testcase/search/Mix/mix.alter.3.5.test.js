const {
  createDriver,
  By,
  until,
} = require("../../../../config/webdriver_config");

async function test_3_5() {
  const driver = await createDriver();
  let result = {
    name: "3.5 Search r·ªóng + Filter 'C∆°m' + Sort 'rating'",
    status: "Failed",
  };

  try {
    await driver.get("http://localhost:3000/search?limit=20&page=1");
    await driver.wait(until.urlContains("/search?"), 10000);
    console.log("‚û°Ô∏è V√†o trang t√¨m ki·∫øm (kh√¥ng c√≥ t·ª´ kh√≥a)");

    // Ch·ªçn danh m·ª•c 'C∆°m'
    const comCategory = await findVisibleCategory(driver, "C∆°m");
    if (!comCategory) throw new Error("Kh√¥ng t√¨m th·∫•y danh m·ª•c 'C∆°m'");
    await comCategory.click();
    await driver.sleep(3000);

    // S·∫Øp x·∫øp theo rating
    const sortRatingOption = await driver.findElement(
      By.css('[data-testid="sort-by-rating"]')
    );
    await sortRatingOption.click();
    await driver.wait(until.urlContains("sort=rating"), 5000);
    console.log("‚úÖ ƒê√£ ch·ªçn filter 'C∆°m' v√† sort theo 'rating'");

    // L·∫•y t·∫•t c·∫£ store hi·ªÉn th·ªã
    const cards = await getVisibleStoreCards(driver);
    console.log(`üì¶ S·ªë store hi·ªÉn th·ªã: ${cards.length}`);

    if (cards.length === 0)
      throw new Error("Kh√¥ng c√≥ store n√†o hi·ªÉn th·ªã sau khi filter + sort");

    const ratings = [];

    for (const [i, card] of cards.entries()) {
      // Ki·ªÉm tra danh m·ª•c 'C∆°m'
      const categoryEls = await card.findElements(By.xpath(".//a | .//span"));
      let hasCom = false;
      for (const el of categoryEls) {
        const text = (await el.getText()).trim().toLowerCase();
        if (text.includes("c∆°m")) {
          hasCom = true;
          break;
        }
      }
      if (!hasCom) {
        throw new Error(`‚ùå Card ${i + 1} kh√¥ng thu·ªôc danh m·ª•c 'C∆°m'`);
      }

      // Ki·ªÉm tra rating (n·∫øu c√≥)
      const ratingEls = await card.findElements(
        By.xpath(".//span[contains(@class, 'text-[#fc6011]')]")
      );
      if (ratingEls.length > 0) {
        const rating = parseFloat(await ratingEls[0].getText());
        if (!isNaN(rating)) {
          ratings.push({ index: i, value: rating });
        }
      }
    }

    if (ratings.length > 0 && ratings[0].index !== 0) {
      throw new Error(
        `‚ùå Store c√≥ rating cao nh·∫•t (${ratings[0].value}) kh√¥ng n·∫±m ·ªü ƒë·∫ßu`
      );
    }

    console.log("‚úÖ T·∫•t c·∫£ store h·ª£p l·ªá (l·ªçc 'C∆°m', sort ƒë√∫ng)");
    result.status = "Passed";
  } catch (error) {
    console.error(`‚ùå ${result.name} Failed:`, error.message);
  } finally {
    await driver.quit();
  }

  return result;
}

// H√†m ph·ª•
async function findVisibleCategory(driver, name) {
  const elements = await driver.findElements(
    By.xpath(
      `//div[contains(@class, 'category-item')]//span[text()='${name}']/ancestor::div[contains(@class, 'category-item')]`
    )
  );
  for (const el of elements) {
    if (await el.isDisplayed()) return el;
  }
  return null;
}

async function getVisibleStoreCards(driver) {
  const cards = await driver.findElements(By.css('[data-testid="store-card"]'));
  const visible = [];
  for (const card of cards) {
    if (await card.isDisplayed()) visible.push(card);
  }
  return visible;
}

module.exports = { test_3_5 };
