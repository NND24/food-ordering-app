const { createDriver, By, until } = require("../../../../config/webdriver_config");
const axios = require("axios");

async function test_3_5() {
  const driver = await createDriver();
  let result = {
    name: "3.5 Search r·ªóng + Filter 'C∆°m' + Sort 'rating' (so s√°nh v·ªõi API)",
    status: "Failed",
  };

  const categoryId = "67c9128a8bdfd68d9d04b8fc"; // ID danh m·ª•c "C∆°m"
  const categoryName = "C∆°m";

  try {
    // üì° G·ªçi API v·ªõi filter 'C∆°m' v√† sort theo 'rating'
    const apiRes = await axios.get("http://localhost:5000/api/v1/customerStore/", {
      params: {
        name: "",
        category: categoryId,
        sort: "rating",
        limit: 20,
        page: 1,
        lat: 10.762622,
        lon: 106.660172,
      },
    });

    if (!apiRes.data.success) {
      throw new Error("API tr·∫£ v·ªÅ l·ªói: " + apiRes.data.message);
    }

    const apiStores = apiRes.data.data;
    console.log(`üì° API tr·∫£ v·ªÅ ${apiStores.length} store`);

    // üß≠ V√†o trang UI
    await driver.get("http://localhost:3000/search?limit=20&page=1");
    await driver.wait(until.urlContains("/search?"), 10000);
    console.log("‚û°Ô∏è V√†o trang t√¨m ki·∫øm (search r·ªóng)");

    // Ch·ªçn filter "C∆°m"
    const comCategory = await findVisibleCategory(driver, categoryName);
    if (!comCategory) throw new Error("Kh√¥ng t√¨m th·∫•y danh m·ª•c 'C∆°m'");
    await comCategory.click();
    await driver.sleep(2000);

    // Ch·ªçn sort theo "rating"
    const sortRatingOption = await driver.findElement(By.css('[data-testid="sort-by-rating"]'));
    await sortRatingOption.click();
    await driver.wait(until.urlContains("sort=rating"), 5000);
    console.log("‚úÖ ƒê√£ ch·ªçn filter 'C∆°m' v√† sort theo 'rating'");

    // L·∫•y store hi·ªÉn th·ªã tr√™n UI
    const cards = await getVisibleStoreCards(driver);
    console.log(`üñºÔ∏è UI hi·ªÉn th·ªã ${cards.length} store`);

    if (cards.length === 0) throw new Error("Kh√¥ng c√≥ store n√†o ƒë∆∞·ª£c hi·ªÉn th·ªã");

    // So s√°nh s·ªë l∆∞·ª£ng
    if (cards.length !== apiStores.length) {
      throw new Error(`‚ö†Ô∏è S·ªë l∆∞·ª£ng store UI (${cards.length}) kh√°c v·ªõi API (${apiStores.length})`);
    }

    // So s√°nh t√™n + ki·ªÉm tra danh m·ª•c + rating
    for (let i = 0; i < cards.length; i++) {
      const card = cards[i];
      const nameEl = await card.findElement(By.css("h4"));
      const uiName = (await nameEl.getText()).trim();
      const apiName = apiStores[i].name.trim();

      if (uiName !== apiName) {
        throw new Error(`‚ùå T√™n store kh√°c nhau t·∫°i v·ªã tr√≠ ${i + 1}: UI='${uiName}', API='${apiName}'`);
      }

      // Ki·ªÉm tra danh m·ª•c c√≥ 'C∆°m'
      const categoryEls = await card.findElements(By.xpath(".//a | .//span"));
      let hasCom = false;
      for (const el of categoryEls) {
        const text = (await el.getText()).trim().toLowerCase();
        if (text.includes("c∆°m")) {
          hasCom = true;
          break;
        }
      }
      if (!hasCom) {
        throw new Error(`‚ùå Store '${uiName}' kh√¥ng thu·ªôc danh m·ª•c 'C∆°m'`);
      }
    }

    console.log("‚úÖ UI kh·ªõp ho√†n to√†n v·ªõi API (l·ªçc 'C∆°m', sort 'rating')");
    result.status = "Passed";
  } catch (error) {
    console.error(`‚ùå ${result.name} Failed:`, error.message);
  } finally {
    await driver.quit();
  }

  return result;
}

// H√†m ph·ª•
async function findVisibleCategory(driver, name) {
  const elements = await driver.findElements(
    By.xpath(
      `//div[contains(@class, 'category-item')]//span[text()='${name}']/ancestor::div[contains(@class, 'category-item')]`
    )
  );
  for (const el of elements) {
    if (await el.isDisplayed()) return el;
  }
  return null;
}

async function getVisibleStoreCards(driver) {
  const cards = await driver.findElements(By.css('[data-testid="store-card"]'));
  const visible = [];
  for (const card of cards) {
    if (await card.isDisplayed()) visible.push(card);
  }
  return visible;
}

module.exports = { test_3_5 };
