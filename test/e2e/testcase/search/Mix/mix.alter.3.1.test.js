const {
  createDriver,
  By,
  until,
  Key,
} = require("../../../../config/webdriver_config");
const axios = require("axios");

async function test_3_1() {
  const driver = await createDriver();
  const keyword = "g√† ta";
  const categoryName = "C∆°m";
  let result = {
    name: "3.1 Search 'g√† ta' + ch·ªçn danh m·ª•c 'C∆°m' v√† so s√°nh v·ªõi API",
    status: "Failed",
  };

  try {
    // üì° G·ªçi API ƒë·ªÉ l·∫•y danh s√°ch store theo keyword v√† category
    const apiRes = await axios.get(
      "http://localhost:5000/api/v1/customerStore/",
      {
        params: {
          name: keyword,
          category: "67c9128a8bdfd68d9d04b8fc",
          lat: 10.762622,
          lon: 106.660172, 
        },
      }
    );

    if (!apiRes.data.success) {
      throw new Error("API tr·∫£ v·ªÅ l·ªói: " + apiRes.data.message);
    }

    const apiStores = apiRes.data.data;
    console.log(`üì° API tr·∫£ v·ªÅ ${apiStores.length} c·ª≠a h√†ng`);

    // üñ•Ô∏è M·ªü trang home v√† nh·∫≠p t·ª´ kh√≥a
    await driver.get("http://localhost:3000/home");

    const searchInputs = await driver.findElements(
      By.css('input[placeholder="T√¨m ki·∫øm qu√°n ƒÉn..."]')
    );

    let searchInput = null;
    for (const input of searchInputs) {
      if (await input.isDisplayed()) {
        searchInput = input;
        break;
      }
    }

    if (!searchInput) throw new Error("Kh√¥ng t√¨m th·∫•y √¥ t√¨m ki·∫øm");

    await searchInput.clear();
    await searchInput.sendKeys(keyword, Key.RETURN);

    await driver.wait(until.urlContains("/search?"), 10000);
    console.log("‚û°Ô∏è ƒê√£ chuy·ªÉn h∆∞·ªõng sang trang t√¨m ki·∫øm");

    // üìå Ch·ªçn danh m·ª•c "C∆°m"
    const comCategory = await findVisibleCategory(driver, categoryName);
    if (!comCategory) throw new Error("Kh√¥ng t√¨m th·∫•y danh m·ª•c 'C∆°m'");
    await comCategory.click();
    await driver.sleep(6000); // ch·ªù l·ªçc

    // üïí L·∫•y store hi·ªÉn th·ªã
    const cards = await getVisibleStoreCards(driver);
    console.log(`üñºÔ∏è UI hi·ªÉn th·ªã ${cards.length} c·ª≠a h√†ng`);

    // üîÅ So s√°nh s·ªë l∆∞·ª£ng
    if (cards.length !== apiStores.length) {
      throw new Error(
        `‚ö†Ô∏è S·ªë l∆∞·ª£ng UI (${cards.length}) ‚â† API (${apiStores.length})`
      );
    }

    // üîç So s√°nh t·ª´ng t√™n
    for (let i = 0; i < cards.length; i++) {
      const nameEl = await cards[i].findElement(By.css("h4"));
      const uiName = (await nameEl.getText()).trim();
      const apiName = apiStores[i].name.trim();

      if (uiName !== apiName) {
        throw new Error(
          `‚ùå Kh√°c t√™n t·∫°i v·ªã tr√≠ ${i + 1}: UI='${uiName}' ‚â† API='${apiName}'`
        );
      }
    }

    console.log("‚úÖ UI v√† API kh·ªõp ho√†n to√†n theo keyword + category");
    result.status = "Passed";
  } catch (error) {
    console.error(`‚ùå ${result.name} Failed:`, error.message);
  } finally {
    await driver.quit();
  }

  return result;
}

// D√πng l·∫°i h√†m ph·ª•
async function findVisibleCategory(driver, name) {
  const elements = await driver.findElements(
    By.xpath(
      `//div[contains(@class, 'category-item')]//span[text()='${name}']/ancestor::div[contains(@class, 'category-item')]`
    )
  );
  for (const el of elements) {
    if (await el.isDisplayed()) return el;
  }
  return null;
}

async function getVisibleStoreCards(driver) {
  const cards = await driver.findElements(By.css('[data-testid="store-card"]'));
  const visible = [];
  for (const card of cards) {
    if (await card.isDisplayed()) visible.push(card);
  }
  return visible;
}

module.exports = { test_3_1 };
