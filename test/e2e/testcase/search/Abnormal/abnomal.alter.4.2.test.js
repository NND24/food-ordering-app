const {
  createDriver,
  By,
  until,
  Key,
} = require("../../../../config/webdriver_config");

async function test_4_2() {
  const driver = await createDriver();
  const injectionPayload = '{"$gt": ""}';
  let result = {
    name: "4.2 NoSQL Injection v·ªõi $gt r·ªóng",
    status: "Failed",
  };

  try {
    await driver.get("http://localhost:3000/home");

    const searchInput = await getVisibleSearchInput(driver);
    if (!searchInput) throw new Error("Kh√¥ng t√¨m th·∫•y √¥ t√¨m ki·∫øm");

    await searchInput.clear();
    await searchInput.sendKeys(injectionPayload, Key.RETURN);
    console.log(`üö® ƒê√£ nh·∫≠p payload: ${injectionPayload}`);

    await driver.wait(until.urlContains("/search?"), 10000);

    let cards = [];
    try {
      await driver.wait(
        until.elementsLocated(By.css('[data-testid="store-card"]')),
        10000
      );
      cards = await driver.findElements(By.css('[data-testid="store-card"]'));
    } catch (e) {
      result.status = "Passed";
      console.log("‚úÖ Kh√¥ng c√≥ store n√†o hi·ªÉn th·ªã ‚Üí Passed");
      return result;
    }

    if (cards.length === 0) {
      result.status = "Passed";
      console.log("‚úÖ Kh√¥ng c√≥ store n√†o tr·∫£ v·ªÅ ‚Üí Passed");
    } else {
      throw new Error(`C√≥ ${cards.length} store ‚Üí C√≥ th·ªÉ d√≠nh injection`);
    }
  } catch (error) {
    console.error(`‚ùå ${result.name} Failed:`, error.message);
  } finally {
    await driver.quit();
  }

  return result;
}
async function getVisibleSearchInput(driver) {
  const inputs = await driver.findElements(
    By.css('input[placeholder="T√¨m ki·∫øm qu√°n ƒÉn..."]')
  );
  for (const input of inputs) {
    if (await input.isDisplayed()) return input;
  }
  return null;
}

module.exports = { test_4_2 };
