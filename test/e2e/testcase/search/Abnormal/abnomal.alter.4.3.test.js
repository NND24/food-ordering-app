const { createDriver, By, until, Key } = require("../../../../config/webdriver_config");
const axios = require("axios");

async function test_4_3() {
  const driver = await createDriver();
  const injectionPayload = "'|| 1==1 ||'";
  let result = {
    name: "4.3 Chu·ªói l·∫° || 1==1 ||",
    status: "Failed",
  };

  try {
    // === üì° G·ªçi API tr·ª±c ti·∫øp v·ªõi payload ===
    const apiRes = await axios.get("http://localhost:5000/api/v1/customerStore/", {
      params: {
        name: injectionPayload,
        lat: 10.762622,
        lon: 106.660172,
      },
    });

    if (!apiRes.data.success) {
      throw new Error("API tr·∫£ v·ªÅ l·ªói: " + apiRes.data.message);
    }

    const apiStores = apiRes.data.data;
    console.log(`üì° API tr·∫£ v·ªÅ ${apiStores.length} c·ª≠a h√†ng v·ªõi payload '${injectionPayload}'`);

    // === üñ•Ô∏è G·ª≠i payload t·ª´ ph√≠a UI ===
    await driver.get("http://localhost:3000/home");

    const searchInput = await getVisibleSearchInput(driver);
    if (!searchInput) throw new Error("Kh√¥ng t√¨m th·∫•y √¥ t√¨m ki·∫øm");

    await searchInput.clear();
    await searchInput.sendKeys(injectionPayload, Key.RETURN);
    console.log(`üö® ƒê√£ nh·∫≠p payload: ${injectionPayload}`);

    await driver.wait(until.urlContains("/search?"), 10000);

    let cards = [];
    try {
      await driver.wait(
        until.elementsLocated(By.css('[data-testid="store-card"]')),
        8000
      );
      cards = await getVisibleStoreCards(driver);
    } catch (e) {
      // Kh√¥ng t√¨m th·∫•y store n√†o, v·∫´n ti·∫øp t·ª•c
      cards = [];
    }

    console.log(`üñºÔ∏è UI hi·ªÉn th·ªã ${cards.length} c·ª≠a h√†ng`);

    // === ‚úÖ Ki·ªÉm tra k·∫øt qu·∫£ ===
    if (cards.length === 0 && apiStores.length === 0) {
      console.log("‚úÖ Kh√¥ng c√≥ k·∫øt qu·∫£ tr·∫£ v·ªÅ t·ª´ c·∫£ API v√† UI ‚Üí Kh√¥ng b·ªã injection");
      result.status = "Passed";
    } else {
      throw new Error(
        `‚ö†Ô∏è C√≥ th·ªÉ b·ªã injection: API(${apiStores.length}) - UI(${cards.length})`
      );
    }
  } catch (error) {
    console.error(`‚ùå ${result.name} Failed:`, error.message);
  } finally {
    await driver.quit();
  }

  return result;
}

// === C√°c h√†m ph·ª• ===
async function getVisibleSearchInput(driver) {
  const inputs = await driver.findElements(
    By.css('input[placeholder="T√¨m ki·∫øm qu√°n ƒÉn..."]')
  );
  for (const input of inputs) {
    if (await input.isDisplayed()) return input;
  }
  return null;
}

async function getVisibleStoreCards(driver) {
  const cards = await driver.findElements(By.css('[data-testid="store-card"]'));
  const visible = [];
  for (const card of cards) {
    if (await card.isDisplayed()) visible.push(card);
  }
  return visible;
}

module.exports = { test_4_3 };
