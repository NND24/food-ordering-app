const {
  createDriver,
  By,
  until,
  Key,
} = require("../../../../config/webdriver_config");

async function test_4_1() {
  const driver = await createDriver();
  const injectionPayload = '{"$ne": null}';
  let result = {
    name: "4.1 NoSQL Injection tr√™n √¥ t√¨m ki·∫øm",
    status: "Failed",
  };

  try {
    await driver.get("http://localhost:3000/home");

    // üîç T√¨m √¥ t√¨m ki·∫øm hi·ªÉn th·ªã
    const searchInputs = await driver.findElements(
      By.css('input[placeholder="T√¨m ki·∫øm qu√°n ƒÉn..."]')
    );
    let searchInput = null;
    for (const input of searchInputs) {
      if (await input.isDisplayed()) {
        searchInput = input;
        break;
      }
    }

    if (!searchInput) throw new Error("Kh√¥ng t√¨m th·∫•y √¥ t√¨m ki·∫øm");

    await searchInput.clear();
    await searchInput.sendKeys(injectionPayload, Key.RETURN);
    console.log(`üö® ƒê√£ nh·∫≠p payload: ${injectionPayload}`);

    // ‚è≥ Ch·ªù ƒëi·ªÅu h∆∞·ªõng sang trang t√¨m ki·∫øm
    await driver.wait(until.urlContains("/search?"), 10000);

    let cards = [];
    try {
      // ‚è≥ Ch·ªù ph·∫ßn t·ª≠ store-card hi·ªÉn th·ªã
      await driver.wait(
        until.elementsLocated(By.css('[data-testid="store-card"]')),
        10000
      );
      cards = await driver.findElements(By.css('[data-testid="store-card"]'));
    } catch (waitError) {
      // Timeout kh√¥ng th·∫•y card l√† ƒëi·ªÅu OK
      console.log("‚úÖ Kh√¥ng c√≥ store n√†o hi·ªÉn th·ªã (timeout) ‚Üí Kh√¥ng b·ªã NoSQL injection");
      result.status = "Passed";
      return result;
    }

    if (cards.length === 0) {
      console.log("‚úÖ Kh√¥ng c√≥ store n√†o tr·∫£ v·ªÅ ‚Üí Kh√¥ng b·ªã NoSQL injection");
      result.status = "Passed";
    } else {
      throw new Error(`K·ª≥ v·ªçng kh√¥ng c√≥ store n√†o, nh∆∞ng t√¨m th·∫•y ${cards.length}`);
    }
  } catch (error) {
    console.error(`‚ùå ${result.name} Failed:`, error.message);
  } finally {
    await driver.quit();
  }

  return result;
}

module.exports = { test_4_1 };
