const axios = require("axios");
const {
  createDriver,
  By,
  until,
  Key,
} = require("../../../../config/webdriver_config");

async function test_1_10() {
  const driver = await createDriver();
  const keyword = "            Tasty Bites            ";
  const trimmedKeyword = keyword.trim();
  let result = {
    name: "1.10 Search c√≥ kho·∫£ng tr·∫Øng",
    status: "Failed",
  };

  try {
    // üü© G·ªçi API ƒë·ªÉ l·∫•y k·∫øt qu·∫£
    const apiRes = await axios.get("http://localhost:5000/api/v1/customerStore/", {
      params: { name: trimmedKeyword },
    });

    const apiStores = apiRes.data.data || [];
    if (apiStores.length !== 1) {
      throw new Error(`API tr·∫£ v·ªÅ ${apiStores.length} c·ª≠a h√†ng (mong mu·ªën 1)`);
    }

    const expectedName = apiStores[0].name;

    await driver.get("http://localhost:3000/home");

    // üîç T√¨m √¥ t√¨m ki·∫øm hi·ªÉn th·ªã
    const searchInputs = await driver.findElements(
      By.css('input[placeholder="T√¨m ki·∫øm qu√°n ƒÉn..."]')
    );
    let searchInput = null;
    for (const input of searchInputs) {
      if (await input.isDisplayed()) {
        searchInput = input;
        break;
      }
    }

    if (!searchInput) throw new Error("Kh√¥ng t√¨m th·∫•y √¥ t√¨m ki·∫øm hi·ªÉn th·ªã!");

    await searchInput.clear();
    await searchInput.sendKeys(keyword, Key.RETURN);
    console.log(`‚úÖ ƒê√£ nh·∫≠p t·ª´ kh√≥a: "${keyword}" v√† nh·∫•n Enter`);

    await driver.wait(until.urlContains("/search?"), 10000);
    await driver.wait(until.urlContains("name="), 10000);
    console.log("‚û°Ô∏è ƒê√£ chuy·ªÉn h∆∞·ªõng sang trang t√¨m ki·∫øm");

    const currentUrl = await driver.getCurrentUrl();
    console.log("üåê ƒê√£ chuy·ªÉn sang URL:", currentUrl);

    await driver.wait(
      until.elementsLocated(By.css('[data-testid="store-card"]')),
      20000
    );
    const allCards = await driver.findElements(
      By.css('[data-testid="store-card"]')
    );
    const storeCards = [];

    for (const card of allCards) {
      if (await card.isDisplayed()) {
        storeCards.push(card);
      }
    }

    console.log(`üì¶ S·ªë l∆∞·ª£ng c·ª≠a h√†ng hi·ªÉn th·ªã: ${storeCards.length}`);
    if (storeCards.length !== 1) {
      throw new Error(`K·ª≥ v·ªçng 1 c·ª≠a h√†ng, nh∆∞ng th·∫•y ${storeCards.length}`);
    }

    const nameEl = await storeCards[0].findElement(By.css("h4"));
    const displayedName = await nameEl.getText();

    if (displayedName.trim() !== expectedName.trim()) {
      throw new Error(`T√™n kh√¥ng kh·ªõp. Giao di·ªán: "${displayedName}" ‚â† API: "${expectedName}"`);
    }

    console.log("‚úÖ T√¨m ƒë√∫ng c·ª≠a h√†ng, t√™n kh·ªõp ch√≠nh x√°c!");
    result.status = "Passed";
  } catch (error) {
    console.error(`‚ùå ${result.name} Failed:`, error.message);
  } finally {
    await driver.quit();
  }

  return result;
}

module.exports = { test_1_10 };
