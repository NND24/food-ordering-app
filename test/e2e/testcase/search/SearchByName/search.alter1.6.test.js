const axios = require("axios");
const {
  createDriver,
  By,
  until,
  Key,
} = require("../../../../config/webdriver_config");

// üîß H√†m lo·∫°i b·ªè d·∫•u ti·∫øng Vi·ªát
function normalizeText(str) {
  return str
    .normalize("NFD")
    .replace(/[\u0300-\u036f]/g, "")
    .toLowerCase()
    .trim();
}

async function test_1_6() {
  const driver = await createDriver();
  const keyword = "Tam k·ª≥";
  let result = {
    name: "1.6 Search t√™n c√≥ d·∫•u",
    status: "Failed",
  };

  try {
    // üü° G·ªçi API
    const apiRes = await axios.get("http://localhost:5000/api/v1/customerStore/", {
      params: { name: keyword },
    });

    if (!apiRes.data.success || apiRes.data.total !== 1) {
      throw new Error(`API tr·∫£ v·ªÅ ${apiRes.data.total} c·ª≠a h√†ng (k·ª≥ v·ªçng 1)`);
    }

    const expectedName = apiRes.data.data[0].name.trim().toLowerCase();

    // üü¢ M·ªü trang v√† nh·∫≠p keyword
    await driver.get("http://localhost:3000/home");

    const searchInputs = await driver.findElements(
      By.css('input[placeholder="T√¨m ki·∫øm qu√°n ƒÉn..."]')
    );
    let searchInput = null;
    for (const input of searchInputs) {
      if (await input.isDisplayed()) {
        searchInput = input;
        break;
      }
    }
    if (!searchInput) throw new Error("Kh√¥ng t√¨m th·∫•y √¥ t√¨m ki·∫øm hi·ªÉn th·ªã!");

    await searchInput.clear();
    await searchInput.sendKeys(keyword, Key.RETURN);
    console.log(`‚úÖ ƒê√£ nh·∫≠p t·ª´ kh√≥a: "${keyword}" v√† nh·∫•n Enter`);

    await driver.wait(until.urlContains("/search?"), 10000);
    await driver.wait(until.urlContains("name="), 10000);
    console.log("‚û°Ô∏è ƒê√£ chuy·ªÉn h∆∞·ªõng sang trang t√¨m ki·∫øm");

    const currentUrl = await driver.getCurrentUrl();
    console.log("üåê ƒê√£ chuy·ªÉn sang URL:", currentUrl);

    await driver.wait(
      until.elementsLocated(By.css('[data-testid="store-card"]')),
      20000
    );
    const allCards = await driver.findElements(
      By.css('[data-testid="store-card"]')
    );
    const storeCards = [];
    for (const card of allCards) {
      if (await card.isDisplayed()) {
        storeCards.push(card);
      }
    }
    console.log(`üì¶ S·ªë l∆∞·ª£ng c·ª≠a h√†ng hi·ªÉn th·ªã: ${storeCards.length}`);

    if (storeCards.length !== 1) {
      throw new Error(`K·ª≥ v·ªçng 1 c·ª≠a h√†ng, nh∆∞ng th·∫•y ${storeCards.length}`);
    }

    const nameEl = await storeCards[0].findElement(By.css("h4"));
    const displayedName = (await nameEl.getText()).trim().toLowerCase();

    // So s√°nh t√™n API
    if (displayedName !== expectedName) {
      throw new Error(`T√™n kh√¥ng kh·ªõp: UI="${displayedName}", API="${expectedName}"`);
    }

    // ‚úÖ Black-box: keyword ph·∫£i n·∫±m trong t√™n hi·ªÉn th·ªã
    if (!displayedName.includes(keyword.toLowerCase())) {
      throw new Error(`T√™n hi·ªÉn th·ªã kh√¥ng ch·ª©a keyword. UI="${displayedName}", keyword="${keyword}"`);
    }

    // ‚úÖ Bonus: keyword kh√¥ng d·∫•u kh·ªõp v·ªõi t√™n kh√¥ng d·∫•u
    const normalizedKeyword = normalizeText(keyword);
    const normalizedName = normalizeText(displayedName);
    if (!normalizedName.includes(normalizedKeyword)) {
      throw new Error(`T√™n kh√¥ng d·∫•u kh√¥ng kh·ªõp keyword. UI="${normalizedName}", keyword="${normalizedKeyword}"`);
    }

    console.log("‚úÖ T√¨m ƒë√∫ng c·ª≠a h√†ng, t√™n kh·ªõp API, c√≥ ch·ª©a keyword v√† c·∫£ d·∫°ng kh√¥ng d·∫•u!");
    result.status = "Passed";
  } catch (error) {
    console.error(`‚ùå ${result.name} Failed:`, error.message);
  } finally {
    await driver.quit();
  }

  return result;
}

function normalizeText(str) {
  return str
    .normalize("NFD")                // T√°ch d·∫•u ra kh·ªèi k√Ω t·ª±
    .replace(/[\u0300-\u036f]/g, "") // Xo√° to√†n b·ªô d·∫•u
    .toLowerCase()
    .trim();
}


module.exports = { test_1_6 };
