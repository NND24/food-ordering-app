const {
  createDriver,
  By,
  until,
} = require("../../../../config/webdriver_config");
const axios = require("axios");

async function test_2_1() {
  const driver = await createDriver();
  let result = {
    name: "2.1 L·ªçc theo danh m·ª•c 'C∆°m' v√† so s√°nh v·ªõi API",
    status: "Failed",
  };

  const categoryName = "C∆°m";

  try {
    // üì° G·ªçi API ƒë·ªÉ l·∫•y store theo danh m·ª•c
    const apiRes = await axios.get("http://localhost:5000/api/v1/customerStore/", {
      params: { category: "67c9128a8bdfd68d9d04b8fc" },
    });

    if (!apiRes.data.success) {
      throw new Error("API tr·∫£ v·ªÅ l·ªói: " + apiRes.data.message);
    }

    const apiStores = apiRes.data.data;
    console.log(`üì° API tr·∫£ v·ªÅ ${apiStores.length} c·ª≠a h√†ng thu·ªôc '${categoryName}'`);

    await driver.get("http://localhost:3000/search?limit=20&page=1");

    await driver.wait(until.urlContains("/search?"), 10000);
    console.log("‚û°Ô∏è ƒê√£ chuy·ªÉn sang trang t√¨m ki·∫øm");

    await driver.wait(
      until.elementsLocated(By.css('[data-testid="store-card"]')),
      20000
    );

    // üìå Click v√†o danh m·ª•c "C∆°m"
    const categoryElements = await driver.findElements(
      By.xpath(
        `//div[contains(@class, 'category-item')]//span[text()='${categoryName}']/ancestor::div[contains(@class, 'category-item')]`
      )
    );

    let comCategory = null;
    for (const el of categoryElements) {
      if (await el.isDisplayed()) {
        comCategory = el;
        break;
      }
    }

    if (!comCategory) {
      throw new Error(`Kh√¥ng t√¨m th·∫•y danh m·ª•c '${categoryName}' ƒëang hi·ªÉn th·ªã`);
    }

    await comCategory.click();
    await driver.sleep(10000); // Ch·ªù render l·∫°i

    const filteredCards = await driver.findElements(
      By.css('[data-testid="store-card"]')
    );

    const visibleCards = [];
    for (const card of filteredCards) {
      if (await card.isDisplayed()) {
        visibleCards.push(card);
      }
    }

    console.log(`üñºÔ∏è UI hi·ªÉn th·ªã ${visibleCards.length} c·ª≠a h√†ng`);

    // üîÅ So s√°nh s·ªë l∆∞·ª£ng
    if (visibleCards.length !== apiStores.length) {
      throw new Error(
        `‚ö†Ô∏è S·ªë l∆∞·ª£ng UI (${visibleCards.length}) ‚â† API (${apiStores.length})`
      );
    }

    // üîç So s√°nh t·ª´ng t√™n c·ª≠a h√†ng
    for (let i = 0; i < visibleCards.length; i++) {
      const nameEl = await visibleCards[i].findElement(By.css("h4"));
      const displayedName = (await nameEl.getText()).trim();
      const expectedName = apiStores[i].name.trim();

      if (displayedName !== expectedName) {
        throw new Error(
          `‚ùå T√™n store kh√°c nhau t·∫°i v·ªã tr√≠ ${i + 1}: UI='${displayedName}', API='${expectedName}'`
        );
      }
    }

    console.log("‚úÖ UI v√† API kh·ªõp ho√†n to√†n theo danh m·ª•c!");
    result.status = "Passed";
  } catch (error) {
    console.error(`‚ùå ${result.name} Failed:`, error.message);
  } finally {
    await driver.quit();
  }

  return result;
}

module.exports = { test_2_1 };
