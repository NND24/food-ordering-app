const request = require("supertest");
const BASE_URL = "http://localhost:5000"; // ‚úÖ ƒë√∫ng port server ƒëang ch·∫°y

describe("GET /api/v1/customerStore", () => {
  it("TC1: T√¨m ki·∫øm theo t√™n + v·ªã tr√≠ + ph√¢n trang", async () => {
    const res = await request(BASE_URL)
      .get("/api/v1/customerStore/") 
      .query({
        name: "Tasty",
        category: "",
        sort: "",
        limit: 20,
        page: 1,
        lat: 10.762622,
        lon: 106.660172,
      });

    console.log(res.body); // üëà th√™m ƒë·ªÉ debug khi l·ªói

    expect(res.statusCode).toBe(200);
    expect(res.body.success).toBe(true);
    expect(Array.isArray(res.body.data)).toBe(true);
    expect(res.body.data.length).toBeLessThanOrEqual(20);
  });
  it("TC2: Kh√¥ng c√≥ name, ch·ªâ l·ªçc theo kho·∫£ng c√°ch", async () => {
    const res = await request(BASE_URL).get("/api/v1/customerStore/").query({
      category: "",
      sort: "",
      limit: 20,
      page: 1,
      lat: 10.762622,
      lon: 106.660172,
    });

    expect(res.statusCode).toBe(200);
    expect(res.body.success).toBe(true);
    expect(Array.isArray(res.body.data)).toBe(true);
  });

  it("TC3: Kh√¥ng c√≥ lat/lon, ch·ªâ l·ªçc theo t√™n", async () => {
    const res = await request(BASE_URL).get("/api/v1/customerStore/").query({
      name: "Tasty",
      category: "",
      sort: "",
      limit: 20,
      page: 1,
    });

    expect(res.statusCode).toBe(200);
    expect(res.body.success).toBe(true);
    expect(Array.isArray(res.body.data)).toBe(true);
  });
  it("TC4: T√™n kh√¥ng t·ªìn t·∫°i (k·∫øt qu·∫£ r·ªóng)", async () => {
    const res = await request(BASE_URL).get("/api/v1/customerStore/").query({
      name: "T√™nKh√¥ngT·ªìnT·∫°i",
      lat: 10.762622,
      lon: 106.660172,
    });

    expect(res.statusCode).toBe(200);
    expect(res.body.success).toBe(true);
    expect(res.body.data.length).toBe(0);
  });

  it("TC5: Sai ƒë·ªãnh d·∫°ng lat/lon", async () => {
    const res = await request(BASE_URL).get("/api/v1/customerStore/").query({
      name: "Tasty",
      lat: "abc",
      lon: "xyz",
    });

    expect(res.statusCode).toBe(200); // ho·∫∑c 400 n·∫øu c√≥ validate
    expect(res.body.success).toBe(true); // ho·∫∑c false n·∫øu l·ªói
  });

  it("TC6: L·ªçc theo category c·ª• th·ªÉ", async () => {
    const res = await request(BASE_URL).get("/api/v1/customerStore/").query({
      category: "67c9128a8bdfd68d9d04b8fc",
      lat: 10.762622,
      lon: 106.660172,
    });

    expect(res.statusCode).toBe(200);
    expect(res.body.success).toBe(true);
    expect(Array.isArray(res.body.data)).toBe(true);
  });
  it("TC7: S·∫Øp x·∫øp theo rating", async () => {
    const res = await request(BASE_URL).get("/api/v1/customerStore/").query({
      sort: "rating",
      lat: 10.762622,
      lon: 106.660172,
    });

    expect(res.statusCode).toBe(200);
    expect(res.body.success).toBe(true);
    expect(Array.isArray(res.body.data)).toBe(true);
  });

  it("TC8: S·∫Øp x·∫øp theo n·ªïi b·∫≠t", async () => {
    const res = await request(BASE_URL).get("/api/v1/customerStore/").query({
      sort: "standout",
      lat: 10.762622,
      lon: 106.660172,
    });

    expect(res.statusCode).toBe(200);
    expect(res.body.success).toBe(true);
  });
  it("TC9: S·∫Øp x·∫øp theo t√™n", async () => {
    const res = await request(BASE_URL).get("/api/v1/customerStore/").query({
      sort: "name",
      lat: 10.762622,
      lon: 106.660172,
    });

    expect(res.statusCode).toBe(200);
    expect(res.body.success).toBe(true);
  });
  it("TC10: Store thi·∫øu t·ªça ƒë·ªô lat/lon", async () => {
    const res = await request(BASE_URL).get("/api/v1/customerStore/").query({
      name: "StoreKh√¥ngT·ªçaƒê·ªô", // gi·∫£ l·∫≠p store b·ªã thi·∫øu lat/lon (n√™n mock DB ho·∫∑c th√™m data test t∆∞∆°ng ·ª©ng)
      limit: 20,
      page: 1,
      lat: 10.762622,
      lon: 106.660172,
    });

    expect(res.statusCode).toBe(200);
    expect(res.body.success).toBe(true);
    expect(Array.isArray(res.body.data)).toBe(true);
    // Store kh√¥ng c√≥ t·ªça ƒë·ªô s·∫Ω b·ªã lo·∫°i do distance=Infinity => 0 k·∫øt qu·∫£
    expect(res.body.data.length).toBe(0);
  });

  // ‚úÖ TC11: Kh√¥ng truy·ªÅn limit v√† page ‚Üí ki·ªÉm tra kh√¥ng ph√¢n trang
  it("TC11: Kh√¥ng c√≥ ph√¢n trang (limit, page)", async () => {
    const res = await request(BASE_URL).get("/api/v1/customerStore/").query({
      name: "Tasty",
      lat: 10.762622,
      lon: 106.660172,
    });

    expect(res.statusCode).toBe(200);
    expect(res.body.success).toBe(true);
    expect(Array.isArray(res.body.data)).toBe(true);
    expect(res.body).not.toHaveProperty("currentPage");
    expect(res.body).not.toHaveProperty("pageSize");
  });

  // ‚úÖ TC12: Kh√¥ng c√≥ store n√†o ƒë∆∞·ª£c APPROVED
  it("TC12: Kh√¥ng c√≥ store n√†o h·ª£p l·ªá (status kh√°c APPROVED)", async () => {
    const res = await request(BASE_URL).get("/api/v1/customerStore/").query({
      name: "UnapprovedStoreTest", // c·∫ßn c√≥ store test trong DB kh√¥ng ph·∫£i APPROVED
      lat: 10.762622,
      lon: 106.660172,
    });

    expect(res.statusCode).toBe(200);
    expect(res.body.success).toBe(true);
    expect(Array.isArray(res.body.data)).toBe(true);
    expect(res.body.data.length).toBe(0);
  });
});
